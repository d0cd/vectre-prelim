inst ld(rd: reg_idx_t, rs: reg_idx_t, offset: word_t) {
	if (valid_access(mode, add(regs[rs], offset)))[and(ma_speculate, ma_prediction(mode, ma_state))] {
		obs_cache = update_obs_cache(obs_cache, regs[rs]);
    	regs[rd] = mem[add(regs[rs], offset)];
	} else {
		pc = exception;
	}
}

inst lbu(rd: reg_idx_t, rs: reg_idx_t, offset: word_t) {
	if (valid_access(mode, add(regs[rs], offset)))[and(ma_speculate, ma_prediction(mode, ma_state))] {
		obs_cache = update_obs_cache(obs_cache, regs[rs]);
    	regs[rd] = mem[add(regs[rs], offset)];
	} else {
		pc = exception;
	}
}

inst sd(rs: reg_idx_t, rd: reg_idx_t, offset: word_t) {
	if (valid_access(mode, add(regs[rs], offset)))[and(ma_speculate, ma_prediction(mode, ma_state))] {
		obs_cache = update_obs_cache(obs_cache, regs[rs]);
    	regs[rd] = mem[add(regs[rs], offset)];
	} else {
		pc = exception;
	}
}

inst sb(rs: reg_idx_ts, rd: reg_idx_t, offset: word_t) {
	if (valid_access(mode, add(regs[rs], offset)))[and(ma_speculate, ma_prediction(mode, ma_state))] {
		obs_cache = update_obs_cache(obs_cache, regs[rs]);
    	regs[rd] = mem[add(regs[rs], offset)];
	} else {
		pc = exception;
	}
}

inst addi(rd: reg_idx_t, rs0: reg_idx_t, imm: word_t) {
    regs[rd] = taint_prop(regs[rs0], imm);
}

inst addiw(rd: reg_idx_t, rs0: reg_idx_t, imm: word_t) {
    regs[rd] = taint_prop(regs[rs0], regs[rs1]);
}

inst slliw(rd: reg_idx_t, rs0: reg_idx_t, imm: word_t) {
    regs[rd] = taint_prop(regs[rs0], imm);
}

inst add(rd: reg_idx_t, rs0: reg_idx_t, rs1: reg_idx_t) {
    regs[rd] = taint_prop(regs[rs0], regs[rs1]);
}

inst and(rd: reg_idx_t, rs0: reg_idx_t, rs1: reg_idx_t) {
    regs[rd] = taint_prop(regs[rs0], regs[rs1]);
}

inst andi(rd: reg_idx_t, rs0: reg_idx_t, imm: word_t) {
    regs[rd] = taint_prop(regs[rs0], word);
}

inst sub(b: word_t, bb: bool) {
    regs[rd] = taint_prop(regs[rs0], regs[rs1]);
}

inst bgeu(rs0: reg_idx_t, rs1: reg_idx_t, target: word_t) {
	if (geu(regs[rs0], regs[rs1]))[and(bp_speculate, bp_prediction(cond, bp_state))] {
		pc = target;
	} else {
		pc = add(pc, 4);
	}
}

inst jalr(rd: reg_idx_t, rs: reg_idx_t, imm: word_t) {
	regs[rd] = add(pc, 4);
	pc = add(regs[rs], imm);
}
